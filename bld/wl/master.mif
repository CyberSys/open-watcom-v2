# the linker master make file
#
# This depends on the following projects:
# orl, plusplus, dwarf, watcom, and trmem

proj_name = wlink

!ifndef wlink_autodepends
wlink_autodepends = .AUTODEPEND
!endif

wlink_trmem = 1

wlink_wreslib = 1

# Base DLL name needs to be 8 chars or less on OS/2, argh! Additionally,
# internal module name may be required to match file name on some platforms.
!ifdef bootstrap
exetarg_name = bwlink
dlltarg_name = bwlinkd
!else
exetarg_name = wlink
dlltarg_name = wlinkd
!endif

# get rid of the -zc
suppress_zc = 1

additional_clean = *.grh *.grc

!ifndef bootstrap
!include idedlls.mif
!endif
!include cproj.mif
!include defrule.mif
!include dllrule.mif
!include deftarg.mif
!include dllbase.mif
!include wres.mif
!include trmem.mif

!include $(orl_dir)/client.mif
!include $(dwarfw_dir)/client.mif

!include $(wlink_dir)/wlobjs.mif

#
# cflags
#
.c: $(wlink_dir)/c;$(wrc_dir)/c;$(lib_misc_dir)/c;$(watcom_dir)/c;$(trmem_dir)

inc_dirs = -I. -I"$(wlink_dir)/h" $(cli_dwarfw_inc_dirs) $(cli_orl_inc_dirs) -I"$(wrc_dir)/h" &
    $(cli_wres_inc_dirs) -I"$(lib_misc_dir)/h" -I"$(watcom_dir)/c"

extra_cpp_flags = -DINSIDE_WLINK
!ifdef DLLS_IMPLEMENTED
extra_cpp_flags += -DDLLS_IMPLEMENTED
!endif
!ifdef use_virtmem
extra_cpp_flags += -DUSE_VIRTMEM
!endif
!ifndef wlink_dll
extra_cpp_flags += -DIDE_PGM
!endif

extra_cpp_flags_idedrv      = -DCHAIN_CALLBACK
extra_cpp_flags_ideentry    = -DCHAIN_CALLBACK
extra_cpp_flags_maindrv     = -DDLL_NAME=$(dlltarg_name)
extra_cpp_flags_stidedrv    = -DSTATIC_LINKAGE
extra_cpp_flags_wlmem       = $(trmem_cpp_flags)

extra_c_flags_wlmem         = $(trmem_cover_cflags)

#
# lflags
#
extra_l_flags_qnx     = op st=24k, off=32k

extra_l_flags_dll     = option implib $(wlink_dllbase_$(host_os)_$(host_cpu))
extra_l_flags_dll_nt  = initinstance terminstance op modname='$(dlltarg_name).dll'
extra_l_flags_dll_os2 = initinstance terminstance op modname='$(dlltarg_name)'

# explicit rules
#################

#
# EXE
#
!ifdef no_orl
wlink_libs            = $(cli_dwarfw_libs)
!else
wlink_libs            = $(cli_dwarfw_libs) $(cli_orl_libs)
!endif

!ifdef wlink_dll
exetarg_prebuild_objs = $(extra_link_res_$(host_os)) $(dlltarg_name).dll
exetarg_objs          = $(comp_objs_drv)
exetarg_libs          = $(dlltarg_name).lib
!else
exetarg_prebuild_objs = $(extra_link_res_$(host_os)) rcmsg.grh
exetarg_objs          = $(comp_objs_exe)
exetarg_libs          = $(wlink_libs)
!endif
exetarg_res           = wresexe.res
exetarg_qnx_res       = usage.u
!include exetarg.mif

#
# DLL
#
dlltarg_prebuild_objs = $(dll_subdir) rcmsg.grh
dlltarg_objs          = $(comp_objs_dll)
dlltarg_libs          = $(wlink_libs)
dlltarg_res           = wresdll.res
!include dlltarg.mif

#
# rc and others
#
ntverrc_exe = $(exetarg_name)
ntverrc_dll = $(dlltarg_name)
ntverrc_path = ../res
!include ntverrc.mif

#if 0
res_objs_exe = $(ntverrc_exe_deps)
res_objs_drv = $(ntverrc_exe_deps)
res_objs_dll = $(ntverrc_dll_deps)
#endif

rc_inc_dirs = -I. -I"$(wlink_dir)/h" -I"$(wrc_dir)/h"

extra_rc_flags_nt = $(ntverrc_def) $(ntverrc_inc_dirs)

wresexe.res : $(wlink_dir)/res/wlink.rc $(ntverrc_exe_deps) rcmsg.grh $(wlink_dir)/res/wlink.msg &
            $(wlink_dir)/h/wlnkmsg.h $(wlink_dir)/res/lnkerror.msg $(__MAKEFILES__)
    @%make echo_rc
    $(rcu8j) $(ppflags_common) $(rc_cppflags) $(rc_flags) $(rc_inc_path) $[@ -fo=$@

wresdll.res : $(wlink_dir)/res/wlink.rc $(ntverrc_dll_deps) rcmsg.grh $(wlink_dir)/res/wlink.msg &
            $(wlink_dir)/h/wlnkmsg.h $(wlink_dir)/res/lnkerror.msg $(__MAKEFILES__)
    @%make echo_rc
    $(rcu8j) $(ppflags_common) $(rc_cppflags) -DRESX_DLL $(rc_flags) $(rc_inc_path) $[@ -fo=$@

rcmsg.grh : $(wrc_dir)/h/rc.msg $(__MAKEFILES__)
    @%make echo_awk
    $(noecho)*awk -v base=MSG_RC_BASE -f $(build_dir)/makemsg.awk -v OUTFILE=$^. $[@

usage.u : $(wlink_dir)/h/usage.sp $(__MAKEFILES__)
    @%make echo_wsplice
    $(noecho)*wsplice -u $[@ $@
